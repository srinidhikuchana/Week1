# -*- coding: utf-8 -*-
"""EV-type-predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jNnERb8b4U3jzjcg3L7AZc_Rae5n5UJb
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.decomposition import PCA

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv("/content/drive/MyDrive/DATASETS/Electric_Vehicle_Population_Data.csv")


df1 = df.copy()

df.head()

df.info()

object_columns = df.select_dtypes(include=['object']).columns.tolist()

print(object_columns)

df.describe()

columns_to_keep = [
    'Model Year', 'Make', 'Model', 'Electric Vehicle Type', 'Electric Range',
    'Base MSRP', 'County', 'State', 'Postal Code', 'Legislative District'
]
df = df[columns_to_keep]

df.dropna(subset=['Electric Vehicle Type'], inplace=True)
for col in df.columns:
    if df[col].dtype == 'object':
        df[col].fillna(df1[col].mode()[0], inplace=True)
    else:
        df[col].fillna(df[col].median(), inplace=True)

columns_to_keep = [
    'Model Year', 'Make', 'Model', 'Electric Vehicle Type', 'Electric Range',
    'Base MSRP', 'County', 'State', 'Postal Code', 'Legislative District']

df.isnull().sum()

label_encoders = {}
for col in ['Make', 'Model', 'County', 'State']:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

target_encoder = LabelEncoder()
df['Electric Vehicle Type'] = target_encoder.fit_transform(df['Electric Vehicle Type'])

X = df.drop('Electric Vehicle Type', axis=1)
y = df['Electric Vehicle Type']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

svm_model = SVC(kernel='linear', C=1.0, random_state=42)
svm_model.fit(X_train, y_train)

y_pred = svm_model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred, target_names=target_encoder.classes_)

print("Accuracy:", accuracy)
print("Confusion Matrix:\n", conf_matrix)
print("Classification Report:\n", classification_rep)

def plot_confusion_matrix(conf_matrix, class_names):
    plt.figure(figsize=(5, 2))
    sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=class_names, yticklabels=class_names)
    plt.title('Confusion Matrix Heatmap')
    plt.xlabel('Predicted Label')
    plt.ylabel('True Label')
    plt.show()

plot_confusion_matrix(conf_matrix, target_encoder.classes_)

if svm_model.kernel == 'linear':
    feature_importance = pd.Series(svm_model.coef_[0], index=X.columns)
    feature_importance = feature_importance.abs().sort_values(ascending=False)

    plt.figure(figsize=(8, 5))
    sns.barplot(x=feature_importance.values, y=feature_importance.index)
    plt.title('Feature Importance based on SVM Coefficients')
    plt.xlabel('Coefficient Magnitude')
    plt.ylabel('Features')
    plt.show()
else:
    print("Feature importance can only be visualized for linear SVM models.")